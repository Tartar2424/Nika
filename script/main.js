document.addEventListener('contextmenu', function(e) {
    e.preventDefault();
});

document.addEventListener('keydown', function(e) {
    if ((e.ctrlKey || e.metaKey) && (e.key === 'c' || e.key === 'C')) {
        e.preventDefault();
    }
});

const messages = [
"–ù–∞–∂–∏–º–∞–π –≥–¥–µ —É–≥–æ–¥–Ω–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—á—Ç–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏",  
"–≠–π, —Ç—ã –ù–∏–∫–∞",  
"–Ø —Ö–æ—á—É —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ —Å–∫–∞–∑–∞—Ç—å",  
"–ó–Ω–∞–µ—à—å, —Ç—ã —Å–∞–º–∞—è –æ–±–∞—è—Ç–µ–ª—å–Ω–∞—è,–∫—Ä–∞—Å–∏–≤–∞—è, –¥–æ–±—Ä–∞—è –¥–µ–≤–æ—á–∫–∞ –Ω–∞ –∑–µ–º–ª–µ ",  
"–¢—ã –æ—á–µ–Ω—å —É–º–Ω–∞—è , –∞ —Ç–≤–æ—è —É–ª—ã–±–∫–∞ 8 —á—É–¥–æ —Å–≤–µ—Ç–∞",  
"–ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–µ–±–µ —É –º–µ–Ω—è –ø–æ—è–≤–∏–ª–∏—Å—å —Ñ–∞–Ω–∞—Ç—ã-–º–∏–ª–∞—à–∫–∏ ",  
"–õ–∞–¥–Ω–æ —à—É—á—É —à—É—á—É",  
"–í —ç—Ç–æ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å, —è —Ö–æ—á—É —á—Ç–æ–±—ã —Ç—ã  –ø—Ä–æ—Å—Ç–æ —É–ª—ã–±–∞–ª–∞—Å—å",  
"–Ø –Ω–∞–¥–µ—é—Å—å ,—á—Ç–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–¥–Ω—è—Ç—å —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ",  
"–¢—ã –±—ã –∑–Ω–∞–ª–∞ –∫–∞–∫ —è –∑–∞–º–æ—Ä–æ—á–∏–ª—Å—è —Å —ç—Ç–æ–π —à—Ç—É–∫–æ–π , —á—Ç–æ–±—ã —Ç—ã –º–æ–≥–ª–∞ –µ–µ —Å–º–æ—Ç—Ä–µ—Ç—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ),–≤—Å–µ —Ç—ã–∫–∞–π –¥–∞–ª—å—à–µ",
"–ó–Ω–∞—é —á—Ç–æ —Ç—ã –∑–ª–∏—à—å—Å—è –∏ —Ç–µ–±–µ —É–∂–µ –Ω–∞–¥–æ–µ–ª–æ —Ç—ã–∫–∞—Ç—å,–ª–∞–¥–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ ",  
"–ù–æ —ç—Ç–æ –æ–±–º–∞–Ω, —Ö–µ—Ö–µ, —Ö–∞—Ö–∞—Ö–∞, –¥–∞–≤–∞–π –µ—â–µ!",  
"–Ø –æ—á–µ–Ω—å —Ä–∞–¥ –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π –∏ —É–¥–∏–≤–ª—è—Ç—å —Ç–µ–±—è —á–µ–º —Ç–æ –Ω–µ–æ–±—ã—á–Ω—ã–º",  
"–ö—Ä–∞—Å–æ—Ç–∫–∞, —è –≤–µ—Ä—é —á—Ç–æ —É —Ç–µ–±—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —Å–≤–æ—è BMW!!!",  
"–Ø –±—ã —Ö–æ—Ç–µ–ª —Å —Ç–æ–±–æ–π –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –∏ –ø–æ–≥—É–ª—è—Ç—å, –Ω–∞–∂–∏–º–∞–π –¥–∞–ª—å—à–µ",  
"–ê –≤–µ–¥—å",  
"–Ø –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å...", 
"–Ø —Ç–∞–∫ –∂–¥–∞–ª —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞..." ,
"–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è –¥–µ–≤–æ—á–∫–∞ –Ω–∞ —Å–≤–µ—Ç–µ , —Å –¥–Ω–µ–º –≤—Å–µ—Ö –≤–ª—é–±–ª–µ–Ω–Ω—ã—Ö —Ç–µ–±—è‚ù§Ô∏è(–æ—Ç –≤—Å–µ–≥–æ —Å–µ—Ä–¥—Ü–∞ –¢–∏–º—É—Ä)",  
"–û—Ñ–∏–≥–µ—Ç—å, —á–µ –¥—É–º–∞–ª–∞ —è  —Ç—É—Ç –≤ –ª—é–±–≤–∏ –±—É–¥—É –ø—Ä–∏–∑–Ω–∞–≤–∞—Ç—å—Å—è? –ê—Ö—Ö–∞—Ö–∞–∞ ",  
"–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É üíù"
];

let currentPage = 0;
let isLastPage = false;

function showMessage() {
    $('.message').text(messages[currentPage]);
    
    isLastPage = currentPage === messages.length - 1;
    
    if (isLastPage) {
        $('.next-button').show();
        $('.bg_heart').css('cursor', 'default');
    } else {
        $('.next-button').hide();
        $('.bg_heart').css('cursor', 'pointer');
    }
}

$('.bg_heart').on('click', function() {
    if (!isLastPage) {
        currentPage++;
        showMessage();
    }
});

var love = setInterval(function() {
    var r_num = Math.floor(Math.random() * 40) + 1;
    var r_size = Math.floor(Math.random() * 65) + 10;
    var r_left = Math.floor(Math.random() * 100) + 1;
    var r_bg = Math.floor(Math.random() * 25) + 100;
    var r_time = Math.floor(Math.random() * 5) + 5;
    
    $('.bg_heart').append("<div class='heart' style='width:" + r_size + "px;height:" + r_size + "px;left:" + r_left + "%;background:rgba(255," + (r_bg - 25) + "," + r_bg + ",1);animation:love " + r_time + "s ease'></div>");
    
    $('.bg_heart').append("<div class='heart' style='width:" + (r_size - 10) + "px;height:" + (r_size - 10) + "px;left:" + (r_left + r_num) + "%;background:rgba(255," + (r_bg - 25) + "," + (r_bg + 25) + ",1);animation:love " + (r_time + 5) + "s ease'></div>");
    
    $('.heart').each(function() {
        var top = parseFloat($(this).css("top"));
        var width = parseFloat($(this).css("width"));
        if (top <= -100 || width >= 150) {
            $(this).remove();
        }
    });
}, 500);

showMessage();

function clearMusicState() {
    localStorage.removeItem('musicPlaying');
    localStorage.removeItem('musicCurrentTime');
}

window.onload = function() {
    clearMusicState(); 
}

function setupMusic() {
    const music = document.getElementById('backgroundMusic');
    
    if (!localStorage.getItem('initialLoad')) {
        clearMusicState();
        localStorage.setItem('initialLoad', 'true');
        music.currentTime = 0;
    }

    const isMusicPlaying = localStorage.getItem('musicPlaying') === 'true';
    const musicCurrentTime = localStorage.getItem('musicCurrentTime') || 0;

    if (isMusicPlaying) {
        music.currentTime = parseFloat(musicCurrentTime);
        music.play().catch(error => console.log('Playback failed', error));
    }

    music.addEventListener('play', () => {
        localStorage.setItem('musicPlaying', 'true');
    });

    music.addEventListener('pause', () => {
        localStorage.setItem('musicPlaying', 'false');
    });

    setInterval(() => {
        localStorage.setItem('musicCurrentTime', music.currentTime);
    }, 1000);

    document.addEventListener('click', function startMusic() {
        music.play().catch(error => {
            console.log('Autoplay prevented', error);
        });
        document.removeEventListener('click', startMusic);
    });
}

document.addEventListener('DOMContentLoaded', setupMusic);
